---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: push-to-cdn
  labels:
    app.kubernetes.io/version: "0.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to push content to Red Hat's CDN
  params:
    - name: dataPath
      type: string
      description: >
        Path to the JSON string of the merged data to use in the data workspace
    - name: binaries_dir
      type: string
      description: Path where the binaries are stored in the workspace
    - name: subdirectory
      description: Subdirectory inside the workspace to be used
      type: string
      default: ""
  workspaces:
    - name: data
      description: Workspace to save the results to
  results:
    - name: srcDestPath
      type: string
      description: The relative path in the workspace to the stored source:destination paths
  steps:
    - name: create-exodus-conf-file
    # TODO: Remove after testing
    # image: quay.io/redhat-appstudio/release-service-utils:digest
      image: quay.io/distribution_relengs/publish-to-dev-portal-test-image
      script: |
        #!/bin/bash
        set -e

        DATA_FILE="$(workspaces.data.path)/$(params.dataPath)"
        if [ ! -f "${DATA_FILE}" ] ; then
            echo "No data JSON was provided."
            exit 1
        fi

        EXODUS_ENV=$(jq -r '.exodus.env' $DATA_FILE)
        exodus_rsync_config_path="$(workspaces.data.path)/$(params.subdirectory)/exodus-rsync.conf"
        
        EXODUS_GW_URL="https://exodus-gw.corp.redhat.com"
        EXODUS_GW_ENV="live"
        EXODUS_GW_CERT="exodus-prod-cert.crt"
        EXODUS_GW_KEY="exodus-prod-privatekey.pem"

        # Check if EXODUS_ENV contains "cdn-qa"
        if [[ "$EXODUS_ENV" == *"cdn-qa"* ]]; then
          EXODUS_GW_CERT="exodus-stage-cert.crt"
          EXODUS_GW_KEY="exodus-stage-privatekey.pem"
          EXODUS_GW_URL="https://exodus-gw.corp.stage.redhat.com"
        fi

        # Check if EXODUS_ENV contains "cdn-stage"
        if [[ "$EXODUS_ENV" == *"cdn-stage"* ]]; then
          EXODUS_GW_ENV="pre"
        fi

        cat << EOF > $exodus_rsync_config_path
        gwcert: $EXODUS_GW_CERT
        gwkey: $EXODUS_GW_KEY
        gwurl: $EXODUS_GW_URL
        gwenv: $EXODUS_GW_ENV

        logger: file:/proc/1/fd/1
        loglevel: INFO

        environments:
        - prefix: exodus
        EOF
        echo "exodus-rsync.conf created here: $exodus_rsync_config_path"
      # How to mount secrets that are in the vault here
      # volumeMounts:
      #   - name: secrets
      #     mountPath: "/secrets"
    - name: create-source-destination-for-files
      image: quay.io/distribution_relengs/publish-to-dev-portal-test-image
      script: |
        #!/bin/bash
        set -e  
        BINARIES_PATH="$(workspaces.data.path)/$(params.binaries_dir)"

        # Check if the directory exists
        if [ ! -d "$BINARIES_PATH" ]; then
            echo "Directory $BINARIES_PATH does not exist."
            exit 1
        fi

        json_output="{}"
        # Prefix for all destination paths
        prefix="exodus:/content/origin/files/sha256"
        # Loop through each file in the directory
        for BINARY_PATH in "$BINARIES_PATH"/*; do
            if [ -f "$BINARY_PATH" ]; then
                binary_name=$(basename "$BINARY_PATH")
                echo "Processing binary: $binary_name"
                checksum=$(sha256sum "$BINARY_PATH" | awk '{print $1}')
                destination_path="$prefix/${checksum:0:2}/$checksum/$binary_name"
                echo "Destination dir: $destination_path"
                echo ""
                # Add key:value (src:dest) pair to the json_output
                json_output=$(echo "$json_output" | jq --arg key "$BINARY_PATH" --arg value "$destination_path" '.[$key]=$value')
            fi
        done

        src_dest_json=$(workspaces.data.path)/$(params.subdirectory)/src_dest_combination.json
        echo -n "$src_dest_json" > "$(results.srcDestPath.path)"
        echo "$json_output" | tee "$src_dest_json"
    - name: run-exodus-command
    # TODO: Remove after testing
      image: quay.io/distribution_relengs/publish-to-dev-portal-test-image
      # Under construction
      # TODO: Update this to do joined publish
      # https://github.com/release-engineering/exodus-rsync?tab=readme-ov-file#joined-publish
      script: |
        #!/bin/bash
        set -e       
        conf_dir="$(workspaces.data.path)/$(params.subdirectory)/exodus-rsync.conf"
        src_dest_json="$(workspaces.data.path)/$(params.subdirectory)/src_dest_combination.json"
        cat "$src_dest_json" | jq -r 'to_entries[] | "\(.key) \(.value)"' | while read -r src dest; do
            echo "Running exodus-rsync command..."
            echo "exodus-rsync --exodus-conf $conf_dir -s $src -d $dest"
            # TODO: Uncomment below to run the actual command
            # exodus-rsync --exodus-conf "$conf_dir" "$src" "$dest"
            echo "exodus-rsync command completed."
            echo ""
        done
  # How to mount secrets that are in the vault here
  # volumes:
  #   - name: secrets
  #     secret:
  #       secretName: cgw-credentials
